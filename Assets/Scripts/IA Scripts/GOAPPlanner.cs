using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using System;
using UnityEngine.UI;
using static UnityEditor.Progress;
using static UnityEngine.Rendering.DebugUI;
public class GOAPPlanner : MonoBehaviour
{
    private void Check(Dictionary<string,object> state)
    {
        state.Clear();

        foreach (var kvp in WorldStateManager.instance.GetAllStates().values)
        {
            state.Add(kvp.Key, kvp.Value);
            //Debug.Log("keys count " + WorldStateManager.instance.GetAllStates().values.Count + "keys chequeados "+kvp.Key +" valores chequeados" + kvp.Value);
        }
        /*
        //en el codigo original acá le pasa el diccionario y chequea si las cosas existen o si se pueden usar, nosotros tenemos 2 opciones

        //opcion 1: que haya un manager que se encargue de tener toda la info, y los distintos objetos lo vayan actualizando
        //algo así como un "WorldStateManager" que tenga el "estado" del mundo real todo el tiempo, al que se pueda acceder por información
        // ej: state["PlayerLife"]=WorldStateManager.GetPlayerLife();
        // ej2: recorro el WorldState.values de WorldStateManager y le voy asignando todos los valores al "state" que entró por parámetro a este metodo

        //opcion 2: tener en este metodo toda clase de cosas locas para que desde acá el mismo Planner
        //se entere del estado del mundo (todo lo que le interesa)

        //por lo pronto procedo como si estuviera xd*/
    }
    public IEnumerator GeneratePlan(GOAPState goal)
    {

        yield return new WaitForSeconds(0.2f);
        var observedState = new Dictionary<string, object>();

        Check(observedState);
        
        var actions = CreatePossibleActionsList();

        GOAPState initial = new GOAPState();

        initial.worldState = new WorldState() { values = new Dictionary<string, object>() };
        initial.worldState.values = observedState; // acá le asignamos los valores conseguidos en el metodo de Check

        Func<GOAPState, float> heuristic = (curr) =>
        {
            int count = 0;
            string key = "PlayerAlive";
            if (!curr.worldState.values.ContainsKey(key) || (bool)curr.worldState.values[key]) 
            {
                count+=1;
            }
            return count;
        };
        Dictionary<string, object> goalDict = new Dictionary<string, object>();
        foreach (var item in goal.worldState.values)
        {
            goalDict.Add(item.Key,item.Value);
        }
        Func<GOAPState, bool> objectice = (curr) =>
        {
            foreach (var goalValue in goalDict)
            {
                if (!curr.worldState.values.ContainsKey(goalValue.Key) || !curr.worldState.values[goalValue.Key].Equals(goalValue.Value))
                    return false;
            }
            return true;
        };
        var actDict = new Dictionary<string, ActionEntity>() //en vez de FSMInputs vamos a usar el que le hayas declarado a la eventFSM
                                                          //aunque supongo que serán algo así, el FSMInput que cree en este codigo es provisional
        {
            {"Search",ActionEntity.Search },
            {"Chase",ActionEntity.Chase },
            {"Attack",ActionEntity.Attack },
            {"Teleport",ActionEntity.Teleport },
            {"Block",ActionEntity.Block },
        };
        var plan = Goap.Execute(initial, null, objectice, heuristic, actions);

        if (plan == null)
            Debug.Log("Couldn't plan");
        else
        {
            var fsmPlan = plan.Where(a => a != null && actDict.ContainsKey(a.Name))
                              .Select(a => actDict[a.Name])
                              .ToList();
            GetComponent <IAController>().NotifyNewPlan(fsmPlan,plan.Sum(action => action.Cost));
            /*

            //con la linea anterior le pasariamos la lista de Inputs para la fsm, y la heuristica final de dicho plan
            //entonces desde el controller llamamos este metodo para generar un plan pasandole un goal
            //después la llamamos otra vez con otro goal
            //y finalmente compara las heuristicas de los dos planes y se queda y ejecuta el más barato
            //no debemos olvidar que si falla alguna accion tiene que volver a generar los planes para elegir y ejecutar el mas optimo*/
        }
    }
    private List<GOAPAction> CreatePossibleActionsList()
    {
        return new List<GOAPAction>() //Por ahora le dejo las precondiciones y efectos como los teniamos, pero al momento de balancear 
                                      //probablemente vayamos a tener que tocar por acá

                                      //nota de camilo del futuro: veniamos usando todos bools, así que si o si hay que cambiar
                                      //a enum para dimensiones, int/float para la vida y la energia del jugador
                                      //y con eso tendríamos un punto más de la consigna cumplido
        {
            new GOAPAction("Search")
            .SetCost(1f)
            .Pre((gS)=>
            {
                bool preconditionsMet =
                   gS.worldState.values.ContainsKey("PlayerDetected") &&
                   !(bool)gS.worldState.values["PlayerDetected"];

                return preconditionsMet;
            })
            .Effect((gS) =>
            {
                gS.worldState.values["PlayerDetected"] = true;
                return gS;

            }),
            new GOAPAction("Chase")
            .SetCost(2f)
            .Pre((gS) =>
            {
                bool preconditionsMet =
                    gS.worldState.values.ContainsKey("PlayerDetected") &&
                    gS.worldState.values.ContainsKey("EnoughEnergy") &&
                    gS.worldState.values.ContainsKey("PlayerAlive") &&
                    gS.worldState.values.ContainsKey("ReduceDistance") &&
                    gS.worldState.values.ContainsKey("PlayerInRange") &&
                    (bool)gS.worldState.values["PlayerDetected"] &&
                    (bool)gS.worldState.values["EnoughEnergy"] &&
                    (bool)gS.worldState.values["PlayerAlive"] &&
                    !(bool)gS.worldState.values["ReduceDistance"] &&
                    !(bool)gS.worldState.values["PlayerInRange"];

                return preconditionsMet;
            })
            .Effect((gS) =>
            {
                //WorldStateManager.instance.DebugState();
                gS.worldState.values["ReduceDistance"]=true;
                gS.worldState.values["PlayerInRange"]=true;
                return gS;
            }),
            new GOAPAction("Attack")
            .SetCost(2f)
            .Pre((gS) =>
            {
                bool preconditionsMet =
                       gS.worldState.values.ContainsKey("PlayerAlive") &&
                       gS.worldState.values.ContainsKey("PlayerDimension")&&
                       gS.worldState.values.ContainsKey("EnemyDimension")&&
                       gS.worldState.values.ContainsKey("PlayerInRange") &&
                       gS.worldState.values.ContainsKey("PlayerDetected") &&
                       gS.worldState.values.ContainsKey("EnoughEnergy") &&
                        (bool)gS.worldState.values["PlayerAlive"] &&
                        (bool)gS.worldState.values["SameDimension"] &&
                        (Dimension)gS.worldState.values["PlayerDimension"]==(Dimension)gS.worldState.values["EnemyDimension"] &&
                        (bool)gS.worldState.values["PlayerInRange"] &&
                        (bool)gS.worldState.values["PlayerDetected"] &&
                        (bool)gS.worldState.values["EnoughEnergy"];

                return preconditionsMet;
            })
            .Effect((gS) =>
            {
                //gS.worldState.values["PlayerHealthReduced"]=true;
                //gS.worldState.values["PlayerLife"]= (float)WorldStateManager.instance.GetState("PlayerLife")-1;
                
                // Reducir la vida del jugador
                if (gS.worldState.values.ContainsKey("PlayerLife"))
                {
                    int currentLife = (int)gS.worldState.values["PlayerLife"];
                    gS.worldState.values["PlayerLife"] = Mathf.Max(0, currentLife - 1); // Reduce 1 punto de vida
                }

                 // Verificar si el jugador está muerto
                if (gS.worldState.values.ContainsKey("PlayerLife") &&
                (int)gS.worldState.values["PlayerLife"] <= 0)
                {
                     gS.worldState.values["PlayerAlive"] = false;
                }

                return gS;

            }),
            new GOAPAction("Teleport")
            .SetCost(4f)
            .Pre((gS) =>
            {
                return  gS.worldState.values.ContainsKey("PlayerAlive") &&
                       gS.worldState.values.ContainsKey("PlayerDimension") &&
                       gS.worldState.values.ContainsKey("EnemyDimension") &&
                       gS.worldState.values.ContainsKey("EnoughEnergy") &&
                        (bool)gS.worldState.values["PlayerAlive"] &&
                        (Dimension)gS.worldState.values["PlayerDimension"]!=(Dimension)gS.worldState.values["EnemyDimension"] &&
                        (bool)gS.worldState.values["EnoughEnergy"];
            })
            .Effect((gS) =>
            {
                gS.worldState.values["SameDimension"]=true;
                gS.worldState.values["ReduceDistance"]=true;
                return gS;
            }),
            new GOAPAction("Block")
            .SetCost(3f)
            .Pre((gS) =>
            {

                bool value = true;
                if (!gS.worldState.values.ContainsKey("PlayerAlive") 
                || !gS.worldState.values.ContainsKey("EnoughEnergy") 
                || !gS.worldState.values.ContainsKey("PlayerEnergy"))
                {
                    value = false;
	            }
                else
                {
                    if (!(bool)gS.worldState.values["PlayerAlive"] 
                    || !(bool)gS.worldState.values["EnoughEnergy"] 
                    || (float)WorldStateManager.instance.GetState("PlayerEnergy") > 300 /2)
                    {
                        value = false;
	                }
	            }
                        
                return value;
            })
            .Effect((gS) =>
            {
                gS.worldState.values["PlayerBlocked"]=true;


                // Reducir la vida del jugador
                if (gS.worldState.values.ContainsKey("PlayerEnergy"))
                {
                    int currentEnergy = (int)gS.worldState.values["PlayerEnergy"];
                    gS.worldState.values["PlayerEnergy"] = Mathf.Max(0, currentEnergy - 25); // Reduce 25 punto de energia
                }

                 // Verificar si el jugador no tiene energia
                if (gS.worldState.values.ContainsKey("PlayerEnergy") &&
                (int)gS.worldState.values["PlayerEnergy"] <= 0)
                {
                     gS.worldState.values["PlayerLowEnergy"] = true;
                }

                return gS;
            })

        };
    }

    #region NOABRIR
    /*

    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠙⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⣠⡶⠞⠛⠉⠉⠉⠙⠳⣦⡀⠀⠀⠈⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⢾⡧⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣧⠀⠀⠀⠀⠀⠀⠉⢛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷⠾⢶⡄⠀⠀⠈⢷⡹⣆⠀⠀⠀⠀⠀⢀⣠⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣤⠞⠁⢀⣴⠞⠉⢿⣜⣀⣀⣤⡴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢀⣴⠛⠃⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠿⠛⠋⠛⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣄⣠⣤⣴⣾⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⡿⠿⠟⠛⠋⠉⠉⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⢛⣿⣉⣁⣀⣠⣠⣤⣴⣶⣶⠿⠿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠉⠉⠻⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⣿⣯⣵⣶⣿⣿⣿⣿⣿⠟⠋⠉⠁⠀⠀⠀⠀
⠟⠛⠛⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⣷⣶⢶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⣀⣀⣤⣤⣴⣶
⣠⣤⣴⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠋⠉⣀⣀⣤⣬⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⠿⠿⠟⠛⠋⠉
⠀⠀⠀⠀⠀⠀⣀⣀⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⡴⠛⠁⢀⡴⢚⣩⠭⠟⠛⠋⠉⠉⠉⠉⠉⠛⠲⢤⡀⠀⠀⠀⠀⠀⠀
⠀⠀⡼⠋⠀⠀⢀⡿⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀
⠀⣸⠧⠤⣄⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀
⠘⠷⢶⡚⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀
⠀⠀⠀⢳⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣀⣀⣤
⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣭⣿⣿
⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢉⠥⠐
⢀⣀⣠⣤⣴⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠘⢲⣐
⣿⣿⣿⣾⡿⠿⠿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣦⡀⠀⠀⠀⣸⠛⠋⠉⠁
⠉⡩⠒⠒⠈⢉⡆⠙⣦⠀⠀⠀⠀⠀⢠⠴⠞⠛⠛⠉⠉⢳⣤⡤⠶⡏⠀⠀⠀⠀
⠀⠙⣒⣒⣬⡭⠴⠖⠚⢳⡄⠀⢀⣀⡼⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠙⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀



    public List<GOAPAction> Plan(Dictionary<string, object> worldStateCopy, Dictionary<string, object> goal, List<GOAPAction> availableActions)
    {
        Debug.Log("Starting plan generation...");
        List<GOAPAction> plan = new List<GOAPAction>();
        float currentPlanHeuristic = 100000;
        foreach (var action in availableActions)
        {
            List <GOAPAction> newPlan = new List<GOAPAction>();
            Debug.Log($"Evaluating action: {action.GetType().Name}");

            if (action.ArePreconditionsMet(worldStateCopy))
            {
                Debug.Log($"Preconditions met for action: {action.GetType().Name}");


                float newPlanHeuristic = 0;
                foreach (var newPlanAction in newPlan)
                {
                    newPlanHeuristic += newPlanAction.Cost;
                }
                if(newPlanHeuristic < currentPlanHeuristic)
                {
                    currentPlanHeuristic = newPlanHeuristic;
                    plan = newPlan;
                }
                //worldState = action.ApplyEffects(new Dictionary<string, object>(worldState));
                

                if (IsGoalAchieved(worldStateCopy, goal))
                {
                    Debug.Log("Goal achieved. Plan successfully generated.");
                    return plan;
                }
            }
            else
            {
                Debug.LogWarning($"Preconditions not met for action: {action.GetType().Name}");
            }
        }

        Debug.LogWarning("No valid plan could be generated.");
        return null;
    }
    public List<GOAPAction> GeneratePlan(Dictionary<string, object> worldStateCopy, Dictionary<string, object> goal
        , List<GOAPAction> availableActions)
    {

        var openList = new PriorityQueue<(List<GOAPAction> plan, Dictionary<string, object> state, float cost)>();

        var bestPlan = new List<GOAPAction>();
        float bestCost = float.MaxValue;



        openList.Put((new List<GOAPAction>(), worldStateCopy, 0), 0);
        int watchdog = 100;
        while (openList.Count > 0 && watchdog >0)
        {
            watchdog--;

            if (watchdog == 0)
                Debug.LogWarning("Watchdog limit reached. GOAP stopped.");

            var (currentPlan, currentState, currentCost) = openList.Get();


            if (IsGoalAchieved(currentState,goal) && currentCost < bestCost)
            {
                bestCost = currentCost;
                bestPlan = currentPlan;
                continue;
            }
            foreach (var action in availableActions)
            {
                if (action.ArePreconditionsMet(currentState))
                {
                    Debug.Log(action.GetName());

                    var newState = new Dictionary<string, object>(currentState);
                    newState = action.ApplyEffects(newState);

                    var newPlan = new List<GOAPAction>(currentPlan) { action };
                    float newCost = currentCost + action.Cost;

                    openList.Put((newPlan, newState, newCost), newCost);
                }
            }
        }

        return bestPlan;

    }
        /*
        var plan = availableActions.Aggregate((plan: new List<GOAPAction>(),currentState:worldStateCopy)
            ,(currentPlan, currentAction) =>
            {
                if (worldStateCopy.ContainsKey("player"))
                {

                }
                if (currentAction.ArePreconditionsMet(currentPlan.currentState))
                {
                    var updatedState = currentAction.ApplyEffects(currentPlan.currentState);
                }

                return currentPlan;
            }).plan;

        yield return new WaitForSeconds(0.01f);

    private bool IsGoalAchieved(Dictionary<string, object> worldStateCopy, Dictionary<string, object> goal)
    {
        foreach (var condition in goal)
        {
            if (!worldStateCopy.ContainsKey(condition.Key))
            {
                Debug.LogWarning($"Key '{condition.Key}' not found in worldState.");
                return false;
            }

            if (!(worldStateCopy[condition.Key] is int))
            {
                Debug.LogError($"Value for '{condition.Key}' is not an integer. Ensure it is correctly initialized.");
                return false;
            }

            if ((int)worldStateCopy[condition.Key] != (int)condition.Value)
            {
                Debug.LogWarning($"Condition '{condition.Key}' in goal does not match worldState. Goal: {condition.Value}, WorldState: {worldStateCopy[condition.Key]}");
                return false;
            }
        }
        Debug.Log("se cumplio");
        return true;
    }
    */
    #endregion
}
